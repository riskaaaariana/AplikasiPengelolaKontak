import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.sql.*;
import java.io.*;

public class aplikasiPengelolaKontak extends javax.swing.JFrame {

    private Connection conn;
     private DefaultTableModel tableModel;
     private String lastSelectedCategory = null;
     
    public aplikasiPengelolaKontak() {
        setupDatabase();
        initComponents();
        setupTableModel(); // Set DefaultTableModel ke JTable
        loadContacts(); // Load data awal dari database
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        cbCategory = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContacts = new javax.swing.JTable();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("APLIKASI PENGELOLA KONTAK");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel7, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Input");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 16);
        jPanel1.add(jLabel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Nama");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 25, 30, 25);
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Phone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 25, 30, 25);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Kategori");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(30, 25, 30, 25);
        jPanel2.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 30, 18);
        jPanel2.add(txtPhone, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 30, 18);
        jPanel2.add(txtName, gridBagConstraints);

        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Keluarga", "Teman", "Kerja" }));
        cbCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCategoryItemStateChanged(evt);
            }
        });
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 30, 18);
        jPanel2.add(cbCategory, gridBagConstraints);

        btnAdd.setText("Tambah");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(20, 23, 0, 23);
        jPanel2.add(btnAdd, gridBagConstraints);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(20, 23, 0, 23);
        jPanel2.add(btnEdit, gridBagConstraints);

        btnDelete.setText("Hapus");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(20, 23, 0, 23);
        jPanel2.add(btnDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 16);
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 16);
        jPanel1.add(jLabel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 67, 25, 36);
        jPanel3.add(txtSearch, gridBagConstraints);

        btnSearch.setText("Cari");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 26, 25, 63);
        jPanel3.add(btnSearch, gridBagConstraints);

        tblContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblContacts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 26, 0, 26);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 26, 10, 123);
        jPanel3.add(btnImport, gridBagConstraints);

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel3.add(btnExport, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 16);
        jPanel1.add(jPanel3, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCategoryItemStateChanged
         cbCategory.addItemListener(e -> {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            String selectedCategory = (String) e.getItem();
            
            // Tampilkan pesan hanya jika kategori yang dipilih berbeda dari yang terakhir
            if (!selectedCategory.equals(lastSelectedCategory)) {
                JOptionPane.showMessageDialog(this, "Kategori Dipilih: " + selectedCategory);
                lastSelectedCategory = selectedCategory; // Update kategori yang terakhir dipilih
            }
        }
    });
    }//GEN-LAST:event_cbCategoryItemStateChanged

    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCategoryActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
     addContact();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    editContact();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    deleteContact();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
    searchContact();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
    importFromCSV();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
    exportToCSV(); 
    }//GEN-LAST:event_btnExportActionPerformed

    //Untuk Setup Database                                   
    private void setupDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:contacts.db");
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("CREATE TABLE IF NOT EXISTS contacts (id INTEGER PRIMARY KEY, name TEXT, phone INTEGER, category TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    //Untuk setup table model
    private void setupTableModel() {
        tableModel = new DefaultTableModel(new String[]{"ID", "Name", "Phone", "Category"}, 0);
        tblContacts.setModel(tableModel); // Sambungkan DefaultTableModel ke JTable
    }
    
    //Untuk memuat database
     private void loadContacts() {
        tableModel.setRowCount(0); // Kosongkan tabel sebelum memuat ulang
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM contacts");
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("phone"),
                        rs.getString("category")
                });
            }
            tblContacts.getSelectionModel().addListSelectionListener(event -> {
        int selectedRow = tblContacts.getSelectedRow();
        if (selectedRow != -1) { // Pastikan ada baris yang dipilih
            // Ambil data dari baris yang dipilih
            String name = (String) tableModel.getValueAt(selectedRow, 1); // Kolom ke-1 untuk nama
            String phone = (String) tableModel.getValueAt(selectedRow, 2); // Kolom ke-2 untuk nomor telepon
            String category = (String) tableModel.getValueAt(selectedRow, 3); // Kolom ke-3 untuk kategori

            // Masukkan data ke dalam JTextField dan JComboBox
            txtName.setText(name);
            txtPhone.setText(phone);
            cbCategory.setSelectedItem(category); // Pilih item yang sesuai di JComboBox
        }
    });
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
     //Untuk nambah kontak
    private void addContact() {
    try {
        String name = txtName.getText();
        String phone = txtPhone.getText();
        String category = (String) cbCategory.getSelectedItem();

        // Validasi agar phone hanya angka
        if (!isNumeric(phone)) {
            JOptionPane.showMessageDialog(this, "Nomor Telepon Harus Angka!");
            return;
        }

        PreparedStatement stmt = conn.prepareStatement("INSERT INTO contacts (name, phone, category) VALUES (?, ?, ?)");
        stmt.setString(1, name);
        stmt.setString(2, phone);
        stmt.setString(3, category);
        stmt.executeUpdate();
        loadContacts(); // Refresh tabel
        
        // Bersihkan textfield
            txtName.setText("");
            txtPhone.setText("");
            cbCategory.setSelectedIndex(0);
        JOptionPane.showMessageDialog(this, "Contact Berhasil Ditambahkany!");
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    
    //Untuk ngedit kontak
private void editContact() {
    try {
        int row = tblContacts.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Pilih Kontak untuk diedit!");
            return;
        }
        int id = (int) tableModel.getValueAt(row, 0);
        String name = txtName.getText();
        String phone = txtPhone.getText();
        String category = (String) cbCategory.getSelectedItem();

        // Validasi agar phone hanya angka
        if (!isNumeric(phone)) {
            JOptionPane.showMessageDialog(this, "Phone harus Angka!");
            return;
        }

        PreparedStatement stmt = conn.prepareStatement("UPDATE contacts SET name = ?, phone = ?, category = ? WHERE id = ?");
        stmt.setString(1, name);
        stmt.setString(2, phone);
        stmt.setString(3, category);
        stmt.setInt(4, id);
        stmt.executeUpdate();
        loadContacts(); // Refresh tabel
        
        // Bersihkan textfield
            txtName.setText("");
            txtPhone.setText("");
            cbCategory.setSelectedIndex(0);
        JOptionPane.showMessageDialog(this, "Contact berhasi diupdate!");
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

// Fungsi untuk memeriksa apakah string hanya berisi angka
private boolean isNumeric(String str) {
    try {
        Long.parseLong(str);
        return true;
    } catch (NumberFormatException e) {
        return false;
    }
}

//Untuk delete contact
    private void deleteContact() {
        try {
            int row = tblContacts.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Pilih Contact untuk dihapus!");
                return;
            }
            int id = (int) tableModel.getValueAt(row, 0);

            PreparedStatement stmt = conn.prepareStatement("DELETE FROM contacts WHERE id = ?");
            stmt.setInt(1, id);
            stmt.executeUpdate();
            loadContacts(); // Refresh tabel
            
            // Bersihkan textfield
            txtName.setText("");
            txtPhone.setText("");
            cbCategory.setSelectedIndex(0);
            JOptionPane.showMessageDialog(this, "Contact Berhasil Dihapus!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //Untuk searching kontak
    private void searchContact() {
        String keyword = txtSearch.getText();
        tableModel.setRowCount(0); // Kosongkan tabel sebelum memuat hasil pencarian
        try {
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM contacts WHERE name LIKE ? OR phone LIKE ?");
            stmt.setString(1, "%" + keyword + "%");
            stmt.setString(2, "%" + keyword + "%");
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("phone"),
                        rs.getString("category")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //Untuk export ke CSV
    private void exportToCSV() {
        try (PrintWriter writer = new PrintWriter(new File("contacts.csv"))) {
            StringBuilder sb = new StringBuilder();
            sb.append("ID,Name,Phone,Category\n");
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                sb.append(tableModel.getValueAt(i, 0)).append(",");
                sb.append(tableModel.getValueAt(i, 1)).append(",");
                sb.append(tableModel.getValueAt(i, 2)).append(",");
                sb.append(tableModel.getValueAt(i, 3)).append("\n");
            }
            writer.write(sb.toString());
            JOptionPane.showMessageDialog(this, "Contacts Berhasil Diexport Ke CSV!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Untuk Import CSV
    private void importFromCSV() {
        try (BufferedReader br = new BufferedReader(new FileReader("contacts.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("ID")) continue;
                String[] data = line.split(",");
                PreparedStatement stmt = conn.prepareStatement("INSERT INTO contacts (name, phone, category) VALUES (?, ?, ?)");
                stmt.setString(1, data[1]);
                stmt.setString(2, data[2]);
                stmt.setString(3, data[3]);
                stmt.executeUpdate();
            }
            loadContacts(); // Refresh tabel
            JOptionPane.showMessageDialog(this, "Contacts berhasil diimport!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aplikasiPengelolaKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aplikasiPengelolaKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aplikasiPengelolaKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aplikasiPengelolaKontak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new aplikasiPengelolaKontak().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblContacts;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
